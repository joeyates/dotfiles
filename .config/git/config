[init]
  # https://git-scm.com/docs/git-init#Documentation/git-init.txt-initdefaultBranch
  defaultBranch = main
# Fix installation problems when using the plug plugin manager in Neovim
# https://stackoverflow.com/questions/22147574/github-fatal-could-not-read-username-for-https-github-com-no-such-file-o/55656224#55656224
[url "git@github.com:"]
  insteadOf = https://github.com/
[branch]
  # https://git-scm.com/docs/git-branch#Documentation/git-branch.txt-branchautoSetupRebase
  autoSetupRebase = remote
[pull]
  rebase = true
[push]
  # https://git-scm.com/docs/git-push#Documentation/git-push.txt-pushdefault
  default = current
[rebase]
  # https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---autostash
  autostash = true
[diff]
  # https://git-scm.com/docs/diff-options#Documentation/diff-options.txt---diff-algorithmpatienceminimalhistogrammyers
  algorithm = minimal
  noprefix = true
  renameLimit = 5000
[diff "rspec"]
  xfuncname = "^[ \t]*((before|context|describe|it|after|around|feature|scenario)[ \t]\\\".*)$"
[log]
  noprefix = true
[mailmap]
  file = "~/.config/git/mailmap"
[merge]
  conflictstyle = diff3
  tool = meld
[show]
  noprefix = true
[interactive]
  # avoid pressing return in 'git add --patch' - requires Perl Term::ReadKey
  singleKey = true
[user]
  name = Joe Yates
  email = joe.g.yates@gmail.com
  signingkey = BE8BCCD1
[advice]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-skippedCherryPicks
  skippedCherryPicks = false
[help]
  autocorrect = 1
# For color.* settings see 'Variables' in git help config
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  commit = blue
  meta = yellow
  frag = magenta
  old = red
  new = green
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[alias]
  #########################
  # configuration
  # list local config (from .git/config)
  cl                  = config --local --list

  #########################
  # files
  ls                  = ls-files

  #########################
  # updating
  co                  = checkout
  p                   = pull
  ps                  = push
  pf                  = push --force-with-lease
  fp                  = fetch --all --prune

  #########################
  # branches
  b                   = branch
  # create a local branch that tracks a remote branch
  bt                  = !sh -c 'git checkout --track -b $0 origin/$0 && git pull'
  # [b]ranch [r]emote [t]rack
  brt                 = !sh -c 'git checkout --track -b $1 $0/$1 && git pull'
  # create a new branch
  bc                  = checkout -b
  # create a 'feature/' branch
  bf                  = !sh -c 'git checkout -b feature/$0'
  # delete remote branch
  drb                 = !sh -c 'git push origin :$0'

  #########################
  # blame
  # $ git blame-line <FILE> <LINE>
  blame-line          = !sh -c 'git blame -L $1,$1 $0'
  line-history        = !sh -c 'git log --pretty=short -u -L $1,$1:$0'

  #########################
  # staging
  a                   = add --patch
  ai                  = add --interactive
  # Add index entries for all unknown files
  an                  = add --intent-to-add .

  ##########################
  # committing
  cm                  = commit
  cmm                 = commit -m
  ca                  = commit --amend --no-edit
  cae                 = commit --amend
  initial             = commit --allow-empty -m 'Initial commit'

  #########################
  # status
  s                   = status --short
  # d - show plain diff
  d                   = diff
  df                  = diff --function-context
  dw                  = diff --word-diff
  dcw                 = diff --color-words
  # dstat {branch}: diff stats - shows changed files and number of changes
  dstat               = diff --stat=100,100
  # ds: 'diff staged'
  ds                  = diff --cached
  # untracked: list all untracked files and directories
  untracked           = "!f() {\
                           local path=${1:-.}; \
                           local matches=\"`git clean -nffdx $path`\"; \
                           echo \"$matches\" | sed -r \"s/Would\\ remove\\ //\"; \
                         }; f"

  #########################
  # searching
  history-grep        = log -G

  #########################
  # history
  # l - log (short sha + title)
  l                   = log --pretty=format:\"%h %s\"
  lp                  = log --patch
  lns                 = log --name-status

  #########################
  # rebase
  ri                  = rebase --interactive --rebase-merges
  rc                  = rebase --continue
  rs                  = rebase --skip
  # Create a temporary commit as an amendment to a previous commit
  # then run autosquash for confirmation
  fix                 = !sh -c 'git commit --fixup $0 && git rebase --interactive --autosquash $0~1'

  #########################
  # mf: 'merge feature', creating a merge commit
  mf                  = merge --no-ff --no-edit

[github]
  user = joeyates

[tig]
  main-view = author:full commit-title:yes,graph=v2,refs=yes
  blame-view = author:full file-name:auto id:yes,color=yes text
  mailmap = true # Replace author names with entries from ~/.gitmailmap
  line-graphics = utf-8 # Draw pretty connectors in tree layout
  #refresh-mode = periodic # Periodic (and auto) refresh does not seem to work
  #refresh-interval = 1

# vim: :set filetype=gitconfig :
