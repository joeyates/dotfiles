#!/usr/bin/env ruby

# jgy-backup-git-untracked ~/code /media/joe/backups/tempfiles/code
# jgy-backup-git-untracked ~/work /media/joe/backups/tempfiles/work

require "bundler/inline"

gemfile do
  source "https://rubygems.org"
  gem "thor"
end

BACKUP_MATCHES = [
  %r{^config/database.yml$},
  %r{^config/[\w\-\.]+\.secrets?\.exs},
  %r{^config/secrets.yml$},
  %r{^.env},
  %r{^jgy-},
  %r{^key_for_data_bags?$}
]

def git_repo?(path)
  File.directory?(File.join(path, ".git"))
end

def directories(path)
  Dir.entries(path).
    select { |p| File.directory?(File.join(path, p)) }.
    reject { |p| p == "." || p == ".." }
end

class Untracked
  attr_reader :path

  def initialize(path:)
    @path = path
  end

  def run
    return [] if !git_repo?(path)
    untracked
  end

  private

  def untracked
    lines.map { |line| line.gsub(/^Would remove /, "") }
  end

  def lines
    raw_untracked.split("\n")
  end

  def raw_untracked
    `(cd #{path} && git clean -nffdx)`
  end
end

class Keep
  attr_reader :path

  def initialize(path:)
    @path = path
  end

  def run
    untracked = Untracked.new(path: path).run

    untracked.select do |u|
      BACKUP_MATCHES.any? { |rx| rx.match?(u) }
    end
  end

  def ignored
    untracked = Untracked.new(path: path).run

    untracked.select do |u|
      BACKUP_MATCHES.all? { |rx| !rx.match?(u) }
    end
  end
end

class Backup
  attr_reader :source
  attr_reader :path
  attr_reader :files
  attr_reader :destination

  def initialize(source:, path:, files:, destination:)
    @source = source
    @path = path
    @files = files
    @destination = destination
  end

  def run
    ensure_destination
    copy_files
  end

  private

  def ensure_destination
    FileUtils.mkdir_p destination_path
  end

  def copy_files
    files.map do |f|
      from = File.join(source_path, f)
      to = File.join(destination_path, f)
      FileUtils.mkdir_p File.dirname(to)
      FileUtils.cp_r from, to
    end
  end

  def destination_path
    File.join(destination, path)
  end

  def source_path
    File.join(source, path)
  end
end

def nested_git_repos(path)
  first_level = directories(path)

  paths = first_level.flat_map do |entry|
    full_path = File.join(path, entry)
    if git_repo?(full_path)
      entry
    else
      ds = directories(full_path)
      repos = ds.select do |d|
        sub_path = File.join(full_path, d)
        git_repo?(sub_path)
      end
      repos.map { |r| File.join(entry, r) }
    end
  end.sort
end

class CLI < Thor
  class Ignored < Thor
    include Thor::Actions

    desc "list SOURCE", "List ignored files"
    def list(source)
      paths = nested_git_repos(source)
      paths.each do |entry|
        full_path = File.join(source, entry)
        ignored = Keep.new(path: full_path).ignored
        if ignored.any?
          puts "#{entry}:"
          puts "\t" + ignored.join("\n\t")
        end
      end
    end

    desc "delete", "Delete ignored files"
    def delete(source)
      paths = nested_git_repos(source)
      paths.each do |entry|
        full_path = File.join(source, entry)
        ignored = Keep.new(path: full_path).ignored
        ignored.each do |p|
          pathname = File.join(full_path, p)
          FileUtils.rm_rf pathname
        end
      end
    end
  end

  class Useful < Thor
    include Thor::Actions

    desc "backup SOURCE DESTINATION [OPTIONS]", "Backup useful files"
    option :delete
    def backup(source, destination)
      delete = options.key?(:delete)

      keeps(source).each do |(path, files)|
        Backup.new(
          source: source, path: path, files: files, destination: destination
        ).run
        if delete
          files.each do |f|
            pathname = File.join(source, path, f)
            File.unlink pathname
          end
        end
      end
    end

    desc "list SOURCE", "List useful files"
    def list(source)
      keeps(source).each do |(path, files)|
        puts "#{path}:"
        puts files.join("\n")
      end
    end

    no_commands do
      def keeps(source)
        paths = nested_git_repos(source)
        keeps = paths.map do |entry|
          full_path = File.join(source, entry)
          keep = Keep.new(path: full_path).run
          if keep.any?
            [entry, keep]
          end
        end.compact
      end
    end
  end

  def self.exit_on_failure?
    true
  end

  desc "ignored SUBCOMMAND [OPTIONS]", "Manage ignored files"
  subcommand "ignored", Ignored

  desc "useful SUBCOMMAND [OPTIONS]", "Manage useful files"
  subcommand "useful", Useful
end

CLI.start(ARGV)
