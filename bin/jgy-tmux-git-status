#!/usr/bin/env ruby

CONFLICT = /^UU\s/m.freeze
STAGED = /^[DM].\s/m.freeze
MODIFIED = /^.[DM]\s/m.freeze

STAGED_ADDED = /^A./m.freeze
STAGED_DELETED = /^D./m.freeze
STAGED_MODIFIED = /^M./m.freeze
STAGED_RENAMED = /^R./m.freeze
UNSTAGED_ADDED = /^.A\s/m.freeze
UNSTAGED_DELETED = /^.D\s/m.freeze
UNSTAGED_MODIFIED = /^.M\s/m.freeze
UNKNOWN = /^\?\?/m.freeze
MAXIMUM_OUTPUT_LENGTH = 30

if `git rev-parse --is-inside-work-tree 2>/dev/null` != "true\n"
  exit 0
end

def matches?(s, regexp)
  if RUBY_VERSION > "2.4"
    s.match?(regexp)
  else
    s.match(regexp)
  end
end

def current_branch
  `git rev-parse --abbrev-ref HEAD`.split[0]
end

def repo_status
  `git status --short`
end

def has_conflicts?(status)
  matches?(status, CONFLICT)
end

def has_staged?(status)
  matches?(status, STAGED)
end

def has_modified?(status)
  matches?(status, MODIFIED)
end

def shorten_branch(branch, length)
  b = branch.gsub(%r{^feature/}, "f/")
  if b.length > length
    b[0 .. length - 3] + "..."
  else
    b
  end
end

status = repo_status
result = ""
length = MAXIMUM_OUTPUT_LENGTH

{
  STAGED_ADDED      => "#[fg=yellow]+",
  STAGED_DELETED    => "#[fg=yellow]-",
  STAGED_MODIFIED   => "#[fg=yellow]M",
  STAGED_RENAMED    => "#[fg=yellow]R",
  UNSTAGED_ADDED    => "#[fg=green]+",
  UNSTAGED_DELETED  => "#[fg=green]-",
  UNSTAGED_MODIFIED => "#[fg=green]M",
  UNKNOWN           => "#[fg=cyan]+"
}.each do |match, marker|
  if matches?(status, match)
    result << marker
    length -= 1
  end
end

result = "[#{result}#[fg=white]] " if result != ""

branch = shorten_branch(current_branch, length)

case
when has_conflicts?(status)
  # Conflict
  result << "#[fg=red]Conflict!"
when has_staged?(status)
  # Modification Staged
  result << "#[fg=yellow]#{branch}"
when has_modified?(status)
  # Modified
  result << "#[fg=green]#{branch}"
else
  # Clean
  result << "#[fg=white]#{branch}"
end

puts result
