#!/usr/bin/env ruby

# List stuff that needs to be cleaned up before deleting a set of
# directories containg Git repos.

# This script assumes that repos are checked out as USERNAME/REPO,
# i.e. torvalds/linux

require "fileutils"
require "optparse"

options = {
  verbose: 0
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"

  opts.on(
    "-p",
    "--path PATH",
    "The path to check"
  ) do |value|
    options[:path] = value
  end

  opts.on(
    "-v",
    "--verbose",
    "Give lots of output"
  ) do
    options[:verbose] += 1
  end
end

parser.parse!

if !options[:path]
  raise "Supply --path PATH"
end

path = options[:path]
VERBOSE = options[:verbose]

if !File.directory?(path)
  raise "Directory '#{path}' does not exist"
end

def git_repo?(path)
  File.directory?(File.join(path, ".git"))
end

def has_origin_remote?(path)
  Dir.chdir(path) do
    `git remote 2>/dev/null`.split("\n").include?("origin")
  end
end

def files(path)
  Dir.entries(path).
    filter { |p| File.file?(File.join(path, p)) }
end

def directories(path)
  Dir.entries(path).
    filter { |p| File.directory?(File.join(path, p)) }.
    reject { |p| p == "." || p == ".." }.
    sort
end

def nested_git_repos(path)
  first_level = directories(path)

  paths = first_level.flat_map do |entry|
    full_path = File.join(path, entry)
    ds = directories(full_path)
    repos = ds.filter do |d|
      sub_path = File.join(full_path, d)
      git_repo?(sub_path)
    end
    repos.map { |r| File.join(entry, r) }
  end.sort
end

# List first-level files and directories that are not Git repos
def list_non_repo_content(path)
  found = []

  paths = nested_git_repos(path)
  first_levels = directories(path)
  first_levels_with_content = paths.map { |p| File.dirname(p) }.uniq
  first_levels_without_content = first_levels - first_levels_with_content
  found += first_levels_without_content.map { |p| File.join(path, p) }

  first_levels_with_content.each do |first|
    first_path = File.join(path, first)
    found += files(first_path).map { |p| File.join(first_path, p) }

    ds = directories(first_path).map { |p| File.join(first_path, p) }
    found += ds.filter { |p| !git_repo?(p) }
  end

  found
end

def list_repos_without_origin(path)
  paths = nested_git_repos(path).map { |p| File.join(path, p) }
  paths.filter do |p|
    !has_origin_remote?(p)
  end
end

def uncommitted(path)
  u = `(cd #{path} && git status --short)`
  u == "" ? nil : u
end

def list_uncommitted(path)
  paths = nested_git_repos(path)
  paths.map do |repo|
    repo_path = File.join(path, repo)
    u = uncommitted(repo_path)
    if u
      <<~MESSAGE
        #{repo_path}:
        #{u}
      MESSAGE
    end
  end.compact
end

def repo_stashed(path)
  u = `(cd #{path} && git stash list)`
  u == "" ? nil : u
end

def list_stashed(path)
  paths = nested_git_repos(path)
  paths.map do |repo|
    repo_path = File.join(path, repo)
    u = repo_stashed(repo_path)
    if u
      <<~MESSAGE
        #{repo_path}:
        #{u}
      MESSAGE
    end
  end.compact
end

def repo_ignored(path)
  u = `(cd #{path} && git clean -nffdx)`
  u.gsub!("Would remove ", "")
  u == "" ? nil : u
end

def list_ignored(path)
  paths = nested_git_repos(path)
  paths.map do |repo|
    repo_path = File.join(path, repo)
    u = repo_ignored(repo_path)
    if u
      <<~MESSAGE
        #{repo_path}:
        #{u}
      MESSAGE
    end
  end.compact
end

def unpushed(path)
  u = `(cd #{path} && git log --branches --not --remotes --format=oneline)`
  u == "" ? nil : u
end

def list_unpushed(path)
  paths = nested_git_repos(path)
  paths.map do |repo|
    repo_path = File.join(path, repo)
    u = unpushed(repo_path)
    if u
      <<~MESSAGE
        #{repo_path}:
        #{u}
      MESSAGE
    end
  end.compact
end

non_repo_content = list_non_repo_content(path)
if non_repo_content.any?
  puts "Found non repo content:"
  non_repo_content.map { |p| puts p }
  exit 1
end

repos_without_origin = list_repos_without_origin(path)
if repos_without_origin.any?
  puts "Found repos without origin:"
  repos_without_origin.map { |p| puts p }
  exit 1
end

uncommitted_paths = list_uncommitted(path)
if uncommitted_paths.any?
  puts "Found uncommitted content:"
  uncommitted_paths.map { |p| puts p }
  exit 1
end

stashed = list_stashed(path)
if stashed.any?
  puts "Found stashed content:"
  stashed.map { |p| puts p }
  exit 1
end

unpushed_paths = list_unpushed(path)
if unpushed_paths.any?
  puts "Found unpushed commits:"
  unpushed_paths.map { |p| puts p }
  exit 1
end

ignored_paths = list_ignored(path)
if ignored_paths.any?
  puts "Found ignored content:"
  ignored_paths.map { |p| puts p }
  exit 1
end
