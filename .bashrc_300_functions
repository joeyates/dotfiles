#############################
# bash scripting related

function jgy-alias-exists() {
  alias $1 2>/dev/null >/dev/null
}

function jgy-function-exists() {
  type -t $1 >/dev/null
}

#############################
# finding stuff

# f - everyday find
# usage:
#   f filename_fragment [path]
# skips git directories and python compiled files
_exclude_matches=(
  _build
  bundle
  .bundle
  deps
  dist
  doc
  .git
  node_modules
  *.pyc
  rel
);
_excludes=''
for _match in ${_exclude_matches[@]}; do
  _excludes="$_excludes -name '$_match' -prune -o "
done

eval "
function jgy-find-files() {
  find \$2 \
    $_excludes \
    -iname \"*\$1*\"    \
    -type f \
    -print;
}
"

eval "
function jgy-find-directories() {
  find \$2 \
    $_excludes \
    -iname \"*\$1*\"    \
    -type d \
    -print;
}
"

eval "
function jgy-find-files-and-directories() {
  find \$2 \
    $_excludes \
    -ipath \"*\$1*\"    \
    -print 2>/dev/null | sort;
}
"

unset _exclude_matches _excludes _match

if which fzf >/dev/null ; then
  # find files matching the input parameters
  # if there's only one result, open it
  # if there are no results, exit with non-zero
  # otherwise, present a menu
  # open the file that is chosen
  # if Ctrl+C is pressed, exit with non-zero
  function jgy-find-open() {
    local matches=$(jgy-find-files-and-directories "$@")
    if [ "x${matches}x" == "xx" ]; then
      return -1
    else
      local count=$(echo "$matches" | wc -l)
      if [[ $count -eq 1 ]]; then
        jgy-edit $matches
      else
        local choice=$(echo "$matches" | fzf)
        if [ "x${choice}x" == "xx" ]; then
          return -1
        fi
        jgy-edit $choice
      fi
    fi
  }
fi

function jgy-timestamp {
  date +%Y%m%d%H%M%S
}

function jgy-clear-screen() {
  local screen_height=`tput lines`
  local lines=${1:-$screen_height}

  for i in $(seq 1 $lines)
  do
    echo "";
  done
}

function macos-trash() {
  if [[ $# -ne 1 ]]; then
    echo "Supply a file/directory name" >&2
    return -1
  fi
  local filename=$1
  osascript -e "tell application \"Finder\" to delete POSIX file \"${PWD}/${filename}\""
}

function jgy-word-diff() {
  wdiff $1 $2 | colordiff
}

function jgy-file-as-json-string() {
  ruby -e "puts File.read('$1').inspect"
}

if which ag >/dev/null ; then
  AG="ag --path-to-ignore $HOME/.config/ag/ignore"
  function jgy-grep() {
    $AG --case-sensitive "$@"
  }

  function jgy-grep-case-insensitive() {
    $AG --ignore-case "$@"
  }

  function jgy-grep-word() {
    $AG --word-regexp --case-sensitive "$@"
  }

  function jgy-grep-word-case-insensitive() {
    $AG --word-regexp --ignore-case "$@"
  }
else
  echo "ag is not installed"
fi

function jgy-ssh-keygen() {
  if [ "x$1x" == "xhelpx" ]; then
    jgy-ssh-keygen-usage;
    return 0;
  fi
  BYTES=${BYTES:-4096}
  COMMENT=${COMMENT:-RSA key}
  NAME=${NAME:-id_rsa}
  ALGORITHM=${ALGORITHM:-ed25519}
  ssh-keygen -t $ALGORITHM -b $BYTES -N "" -C "$COMMENT" -f "$NAME"
}

function jgy-ssh-keygen-usage() {
  echo "Usage: [BYTES=2048|4096*] [COMMENT=""] [NAME=FILE_NAME] [ALGORITHM=ed25519*|rsa] jgy-ssh-keygen";
}

##########################################
# editor

function jgy-edit {
  nvr "$@"
}

# Create a directory and `cd` into it
function jgy-mc {
  if [[ $# -ne 1 ]]; then
    echo "Supply a directory name"
    return -1
  fi
  mkdir $1
  cd $1
}

# Local Variables:
# mode: sh
# End:

# vim: set filetype=sh :

# dotfiles: https://gitlab.com/joeyates/jgy-dotfiles
