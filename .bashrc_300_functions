#############################
# bash scripting related

function jgy-function-exists() {
  type -t $1 >/dev/null
}

#############################
# finding stuff

# f - everyday find
# usage:
#   f filename_fragment [path]
# skips git directories and python compiled files
_exclude_matches=( '_build' 'bundle' 'deps' 'dist' '.git' 'node_modules' '*.pyc' 'rel' );
_excludes=''
for _match in ${_exclude_matches[@]}; do
  _excludes="$_excludes -name '$_match' -prune -o "
done

eval "
function jgy-find-files() {
  find \$2 \
    $_excludes \
    -iname \"*\$1*\"    \
    -type f \
    -print;
}
"

eval "
function jgy-find-directories() {
  find \$2 \
    $_excludes \
    -iname \"*\$1*\"    \
    -type d \
    -print;
}
"

eval "
function jgy-find-files-and-directories() {
  find \$2 \
    $_excludes \
    -ipath \"*\$1*\"    \
    -print | sort;
}
"

unset _exclude_matches _excludes _match

function jgy-find-open-first() {
  local first=$(jgy-find-files $* | head --lines=1)
  if [ "x${first}x" == "xx" ]; then
    return -1
  fi
  jgy-edit $first
}

function jgy-timestamp {
  date +%Y%m%d%H%M%S
}

function jgy-clear-screen() {
  local screen_height=`tput lines`
  lines=${1:-$screen_height}

  for i in $(seq 1 $lines)
  do
    echo "";
  done
}

function jgy-word-diff() {
  wdiff $1 $2 | colordiff
}

function jgy-file-as-json-string() {
  ruby -e "puts File.read('$1').inspect"
}

if which ack-grep >/dev/null ; then
  function jgy-grep() {
    ack-grep $*
  }

  function jgy-grep-case-insensitive() {
    ack-grep -i $*
  }

  function jgy-grep-word() {
    local pattern=$1
    shift
    ack-grep "\b$pattern\b" $*
  }

  function jgy-grep-word-case-insensitive() {
    local pattern=$1
    shift
    ack-grep -i "\b$pattern\b" $*
  }
elif which ack >/dev/null ; then
  function jgy-grep() {
    local pattern=$1
    shift
    ack "$pattern" $*
  }

  function jgy-grep-case-insensitive() {
    local pattern=$1
    shift
    ack -i "$pattern" $*
  }

  function jgy-grep-word() {
    local pattern=$1
    shift
    ack "\b$pattern\b" $*
  }

  function jgy-grep-word-case-insensitive() {
    local pattern=$1
    shift
    ack -i "\b$pattern\b" $*
  }
elif which ag >/dev/null ; then
  function jgy-grep() {
    ag --case-sensitive $*
  }

  function jgy-grep-case-insensitive() {
    ag --ignore-case $*
  }

  function jgy-grep-word() {
    ag --word-regexp --case-sensitive $*
  }

  function jgy-grep-word-case-insensitive() {
    ag --word-regexp --ignore-case $*
  }
else
  echo "No ack-type program installed"
fi

function jgy-ssh-keygen() {
  if [ "x$1x" == "xhelpx" ]; then
    jgy-ssh-keygen-usage;
    return 0;
  fi
  BYTES=${BYTES:-4096}
  COMMENT=${COMMENT:-RSA key}
  NAME=${NAME:-id_rsa}
  ssh-keygen -t rsa -b $BYTES -N "" -C "$COMMENT" -f "$NAME"
}

function jgy-ssh-keygen-usage() {
  echo "Usage: [BYTES=2048|4096*] [COMMENT=""] [NAME=FILE_NAME] jgy-ssh-keygen";
}

##########################################
# emacs

function jgy-is-emacs-running {
  pgrep -x emacs >/dev/null
}

function jgy-edit {
  if jgy-is-emacs-running
  then
    # running - use emacsclient
    emacsclient --alternate-editor="" --no-wait $*
  else
    # not running - use emacs"
    if [ ! -f ".emacs.desktop" ]; then
      # If there is no saved session,
      # stop emacs searching in parent directories
      touch .emacs.desktop
    fi
    TERM=xterm-24bits emacs $*
  fi
}

# Local Variables:
# mode: sh
# End:

# vim: set filetype=sh :

# dotfiles: https://gitlab.com/joeyates/jgy-dotfiles
